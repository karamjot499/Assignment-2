import java.util.Random;
import java.util.Arrays;

public class Car {
    private int speed; // Speed in km/h
    private String direction; // Direction: "N", "S", "E", "W"
    private String color;

    public Car(int speed, String direction) {
        this.speed = speed;
        this.direction = direction;
        String[] colors = {"Red", "Green", "Blue", "Orange", "Pink"};
        Random rand = new Random();
        this.color = colors[rand.nextInt(colors.length)];
    }

    public int getSpeed() {
        return speed;
    }

    public void accelerate(int amount) {
        speed += amount;
    }

    public void brake(int amount) {
        speed = Math.max(0, speed - amount);
    }

    public String getDirection() {
        return direction;
    }

    public String getColor() {
        return color;
    }
}

public class TrafficLight {
    private boolean isGreen;

    public TrafficLight() {
        isGreen = false;
    }

    public boolean isGreen() {
        return isGreen;
    }

    public void setGreen(boolean isGreen) {
        this.isGreen = isGreen;
    }
}

public class IntersectionSimulator {
    private static int[][] colorDirectionCount = new int[5][4];
    private static final int SIMULATION_TIME_SECONDS = 60;

    public static void main(String[] args) {
        TrafficLight trafficLight = new TrafficLight();
        Random rand = new Random();

        // Create cars with random speeds and directions
        Car[] cars = new Car[20];
        for (int i = 0; i < cars.length; i++) {
            int speed = rand.nextInt(60) + 20;
            String[] directions = {"N", "S", "E", "W"};
            String direction = directions[rand.nextInt(directions.length)];
            cars[i] = new Car(speed, direction);
        }

        for (int time = 0; time < SIMULATION_TIME_SECONDS; time++) {
            int randomDirectionIndex = rand.nextInt(4);
            String[] directions = {"N", "S", "E", "W"};
            String greenDirection = directions[randomDirectionIndex];
            trafficLight.setGreen(true);

            for (Car car : cars) {
                if (car.getDirection().equals(greenDirection)) {
                    updateCarCount(car);
                }
            }

            trafficLight.setGreen(false);

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        generateReport();
    }

    private static void updateCarCount(Car car) {
        int colorIndex = Arrays.asList("Red", "Green", "Blue", "Orange", "Pink").indexOf(car.getColor());
        int directionIndex = Arrays.asList("N", "S", "E", "W").indexOf(car.getDirection());
        colorDirectionCount[colorIndex][directionIndex]++;
    }

    private static void generateReport() {
        System.out.println("\nColor Direction Report:");
        String[] colors = {"Red", "Green", "Blue", "Orange", "Pink"};
        String[] directions = {"N", "S", "E", "W"};
        for (int i = 0; i < colors.length; i++) {
            System.out.println(colors[i] + " cars:");
            for (int j = 0; j < directions.length; j++) {
                System.out.println("  " + directions[j] + ": " + colorDirectionCount[i][j] + " cars");
            }
        }
    }
}
